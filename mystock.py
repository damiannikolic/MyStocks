# -*- coding: utf-8 -*-
"""MyStock

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijxCXDm3DAEE_kmf-RGdnKgRuc3GsBXR
"""

! pip install yfinance
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
import seaborn as sns

#sampled stocks
Prod_Volatility = {}
Prod_Text = ["Apple", "Telsa", "Gamestop", "Amazon", "Microsoft", "Google", "Walmart", "Bank of America", "Walt Disney", "Nike"]
Prod_Code = ["AAPL", "TSLA", "GME", "AMZN", "MSFT", "GOOG", "WMT", "BAC", "DIS", "NKE"]
for i in Prod_Code:
  ticker= i
  stock = yf.download(ticker, start="2020-01-01", end="2022-10-14")
  stock.head()

  stock['daily_returns']=(stock['Close'].pct_change())*100
  print(stock['daily_returns'])

  stock.dropna(inplace=True)
  fig,ax=plt.subplots(figsize=(6,3))

  plt.plot(stock['daily_returns'], label = 'Daily Returns')
  plt.legend(loc='best')
  plt.title(i + " Stock Daily Returns Over Time")
  plt.show()
#here the volatility is measured to be able to check the stocks safety
  import math
  daily_volatility_stock = stock['daily_returns'].std()
  print('Daily volatility:')
  print(i + ": ", '{:.2f}%'.format(daily_volatility_stock))


  monthly_volatility_stock = math.sqrt(21) * daily_volatility_stock
  print('Monthly volatility:')
  print (i + ": ", '{:.2f}%'.format(monthly_volatility_stock))
  Prod_Volatility[i] = monthly_volatility_stock

  annual_volatility_stock = math.sqrt(252) * daily_volatility_stock
  print('Annual volatility:')
  print (i + ": ", '{:.2f}%'.format(annual_volatility_stock))

! pip install yfinance
import numpy as np
from scipy import stats
from scipy.stats import sem
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from prettytable import PrettyTable

import yfinance as yf

Prod_Selling_Price = []
for g in Prod_Code:
  stock_info = yf.Ticker(g).info
# stock_info.keys() for other properties you can explore
  stockprice = stock_info['regularMarketPrice']
  Prod_Selling_Price.append(stockprice)
  previous_close_price = stock_info['regularMarketPreviousClose']

your_path = 'your_path'

Number_of_Prods = 10

print(Prod_Volatility)
sortedProdVol = sorted(Prod_Volatility.items(), key=lambda x:x[1])
print(sortedProdVol)

riskAsk = input("type risk or safe: ")
if riskAsk == "safe":
  for i in sortedProdVol[:3]:
    print(i[0])
elif riskAsk == "risk":
  for i in sortedProdVol[-3:]:
    print(i[0])

import math
! pip install yfinance
import yfinance as yf
import datetime as dt
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler 
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from numpy.core.multiarray import datetime_as_string
import datetime as dt

stock_data = yf.download('AAPL', start='2016-01-01', end='2022-10-01')
stock_data.head()

#plotting apple stock
plt.figure(figsize=(15, 8))
plt.title('Apple Stock')
plt.plot(stock_data['Close'])
plt.xlabel('Date')
plt.ylabel('Prices ($)')

close_prices = stock_data['Close']
values = close_prices.values
#value = apple stock $$$ valuation
training_data_len = math.ceil(len(values)* 0.8)

#plotting array
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(values.reshape(-1,1))

#set apart the first 80% of the stock data as the training set
train_data = scaled_data[0: training_data_len, :]

#feature data
x_train = []

#label data
y_train = []

#60 day window of historical prices
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])

#converted x and y into arrays accepted by the Tensorflow 4 neural network
x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

test_data = scaled_data[training_data_len-60: , : ]
#extracting the closing prices from our normalized dataset(last 20%)
x_test = []
y_test = values[training_data_len:]

for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#this finds the increase in price in the last 60 values in $
l60s = 0
l60v = values[-60:]
for i in l60v: 
  l60s += i
l60average = l60s/60
print('This is the average of the 60 most recent elements:')
print(l60average)
startdozen = l60v[:10]
enddozen = l60v[-10:]
startdozensum = 0
enddozensum = 0
for i in startdozen:
  startdozensum += i
for i in enddozen:
  enddozensum += i
startdozenavg = startdozensum/10
enddozenavg = enddozensum/10
endstartdiff_a = enddozenavg - startdozenavg
pctdozenincrease = endstartdiff_a/startdozenavg
print('This is the % increase in the last 60 elements')
print(startdozenavg)
print(enddozenavg)
print(pctdozenincrease)

#bigger spectrum to figure out bigger picture increase from last 300 values
l300s = 0
l300v = values[-300:]
for i in l300v: 
  l300s += i
l300average = l300s/300
print('This is the average of the 300 most recent values:')
print('- - - - -')
print('average of last 300 values')
print(l300average)
startfifty = l300v[:50]
endfifty = l300v[-50:]
startfiftysum = 0
endfiftysum = 0
for i in startfifty:
  startfiftysum += i
for i in endfifty:
  endfiftysum += i
startfiftyavg = startfiftysum/50
endfiftyavg = endfiftysum/50
endstartdiff_b = endfiftyavg - startfiftyavg
pctfiftyincrease = endstartdiff_b/startfiftyavg
print('- - - - -')
print('This is the % increase in the last 300 values:')

_last300 = endfiftyavg - startfiftyavg
_last300_rate = _last300/200
print('- - - - -')
print('This is the percent it increased over 300 days')
print(_last300_rate)
_last60 = enddozenavg - startdozenavg
_last60_rate = _last60/40
print('- - - - -')
print('This is the percent it increased over 60 days')
print(_last60_rate)

#applying rate to future
mostrecentval = values[-1]
print('- - - - -')
print('Apple stock in 60 days')
print(l300average)
print('- - - - -')
print('Most Recent Value')
print(mostrecentval)
#price in 60 days
fake_avg_in_60_days = l300average*(1+_last60_rate)
rate_from_current_value60 = fake_avg_in_60_days/mostrecentval
#price in 300 days
fake_avg_in_300_days = l300average*(1+_last300_rate)
rate_from_current_value300 = fake_avg_in_300_days/mostrecentval
print('- - - - -')
print('This is the rate that Apple stock will increase by for the next 60 days from its current price')
print(rate_from_current_value60)
print('- - - - -')
print('This is the rate that Apple stock will increase by for the next 300 days from its current price')
print(rate_from_current_value300)

model = keras.Sequential()
model.add(layers.LSTM(100, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(layers.LSTM(100, return_sequences=False))
model.add(layers.Dense(25))
model.add(layers.Dense(1))
model.summary()

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size= 1, epochs=3)

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

data = stock_data.filter(['Close'])
train = data[:training_data_len]
validation = data[training_data_len:]
validation['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.plot(train)
plt.plot(validation[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

from numpy.core.multiarray import datetime_as_string
import datetime as dt
# x axis values 
dates = ['10/18/2022', '10/17/2022', '10/16/2022', '10/15/2022', '10/14/2022', '10/13/2022', '10/12/2022', '10/11/2022', '10/10/2022', '10/07/2022', '10/06/2022', '10/05/2022', '10/04/2022', '10/03/2022', '9/30/2022', '9/29/2022', '9/28/2022', '9/27/2022']
x = [dt.datetime.strptime(d,'%m/%d/%Y').date() for d in dates]
# corresponding y axis values 
y = [150.00, 148.00, 144.00, 141.00, 138.19, 138.22, 138.57, 139.45, 145.22, 143.01, 144.26, 137.69, 138.00, 140.68, 144.84, 149.95, 149.64, 151.76] 
plt.figure(figsize=(16, 8)) 
# plotting the points  
plt.plot(x, y)

# naming the x axis 
plt.xlabel('date') 
# naming the y axis 
plt.ylabel('price') 
    
# giving a title to my graph 
plt.title('AAPL Prediction over 60 days') 
    
# function to show the plot 
plt.show()